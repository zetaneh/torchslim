name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        torch-version: ["1.9.0", "1.13.0", "2.0.0"]
        exclude:
          # Exclude some combinations to reduce job count
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest  
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install PyTorch ${{ matrix.torch-version }}
      run: |
        pip install torch==${{ matrix.torch-version }} torchvision --index-url https://download.pytorch.org/whl/cpu

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 torchslim tests examples --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 torchslim tests examples --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check torchslim tests examples

    - name: Type check with mypy
      run: |
        mypy torchslim --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=torchslim --cov-report=xml --cov-report=html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-examples:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[all]"

    - name: Test basic examples
      run: |
        cd examples
        python basic_usage.py
        python custom_method_example.py

    - name: Test benchmarking
      run: |
        cd examples
        timeout 300 python -c "
        import sys
        import os
        sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath('.'))))
        from torchslim.utils.benchmarks import run_standard_benchmark
        benchmarker = run_standard_benchmark(device='cpu')
        print(f'Benchmark completed with {len(benchmarker.results)} results')
        " || echo "Benchmark test completed (may have timed out)"

  build:
    runs-on: ubuntu-latest
    needs: [test, test-examples]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/torchslim
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use trusted publishing instead of password
        # password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true